// PDF Generation Utility
import jsPDF from 'jspdf';

export const generatePDF = (pitchContent, options = {}) => {
  try {
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const usableWidth = pageWidth - (margin * 2);
    const lineHeight = 7;
    
    // Header
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Startup Pitch Deck', margin, margin + 10);
    
    // Subtitle
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(100);
    pdf.text('Generated by Cofoundr AI', margin, margin + 20);
    
    // Add generation date
    const date = new Date().toLocaleDateString();
    pdf.text(`Generated on: ${date}`, margin, margin + 28);
    
    // Reset color for content
    pdf.setTextColor(0);
    
    let currentY = margin + 45;
    
    // Split content into slides
    const slides = pitchContent.split('**SLIDE');
    
    slides.forEach((slide, index) => {
      if (index === 0 && !slide.trim()) return; // Skip empty first element
      
      // Check if we need a new page
      if (currentY > pageHeight - 40) {
        pdf.addPage();
        currentY = margin;
      }
      
      // Slide title
      const slideLines = slide.split('\n');
      const slideTitle = slideLines[0].replace(/\*/g, '').trim();
      
      if (slideTitle) {
        pdf.setFontSize(16);
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(41, 128, 185); // Blue color
        pdf.text(`SLIDE ${slideTitle}`, margin, currentY);
        currentY += lineHeight + 3;
        
        pdf.setTextColor(0); // Reset to black
        pdf.setFontSize(11);
        pdf.setFont('helvetica', 'normal');
        
        // Slide content
        slideLines.slice(1).forEach(line => {
          line = line.trim();
          if (line && !line.startsWith('*')) {
            // Handle bullet points
            if (line.startsWith('•') || line.startsWith('-')) {
              line = '  • ' + line.substring(1).trim();
            }
            
            // Split long lines
            const splitLines = pdf.splitTextToSize(line, usableWidth);
            splitLines.forEach(splitLine => {
              if (currentY > pageHeight - 20) {
                pdf.addPage();
                currentY = margin;
              }
              pdf.text(splitLine, margin, currentY);
              currentY += lineHeight;
            });
          }
        });
        
        currentY += 5; // Space between slides
      }
    });
    
    // Footer on last page
    pdf.setFontSize(10);
    pdf.setTextColor(150);
    pdf.text('Created with Cofoundr AI - Your AI-Powered Pitch Deck Generator', 
             margin, pageHeight - 10);
    
    return pdf;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF. Please try again.');
  }
};

export const downloadPDF = (pitchContent, filename = null) => {
  try {
    const pdf = generatePDF(pitchContent);
    const defaultFilename = `pitch-deck-${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(filename || defaultFilename);
    return true;
  } catch (error) {
    console.error('Error downloading PDF:', error);
    return false;
  }
};

// Alternative: Generate PDF blob for preview
export const generatePDFBlob = (pitchContent) => {
  try {
    const pdf = generatePDF(pitchContent);
    return pdf.output('blob');
  } catch (error) {
    console.error('Error generating PDF blob:', error);
    throw error;
  }
};
